package com.stackroute.cvrp.service;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrl;

import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Scanner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.core.OrderComparator.OrderSourceProvider;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.stackroute.cvrp.domain.Location;
<<<<<<< HEAD
import com.stackroute.cvrp.domain.Logistics;
import com.stackroute.cvrp.domain.Slot;
=======
import com.stackroute.cvrp.domain.Order;
import com.stackroute.cvrp.domain.DateLogistics;
import com.stackroute.cvrp.domain.Slot;
import com.stackroute.cvrp.domain.Vehicle;
>>>>>>> 7d42e2f5487168cd174b2c09c95b18224356b621
import com.stackroute.cvrp.exceptions.IllegalLocationMatrixException;
import com.stackroute.cvrp.repository.CvrpRepository;
import com.stackroute.cvrp.repository.OrderRepository;
import com.stackroute.cvrp.repository.SlotRepository;
import com.stackroute.cvrp.repository.VehicleRepository;

import net.minidev.json.JSONArray;
import net.minidev.json.JSONObject;
import net.minidev.json.parser.JSONParser;

@Service
@Qualifier("CvrpServiceImpl")
public class CvrpServiceImpl implements CvrpService {
	RestTemplate restTemplate = new RestTemplate();
	String url_logistic = "http://localhost:8090/api/v1/logistics";
	// MappingJacksonHttpMessageConverter converter = new
	// MappingJacksonHttpMessageConverter();
	private CvrpRepository cvrpRepository;
	private SlotRepository slotRepo;
	private OrderRepository orderRepository;
	private VehicleRepository vehicleRepository;

	@Autowired
	public CvrpServiceImpl(CvrpRepository cvrpRepository, SlotRepository slotRepo, OrderRepository orderRepository,
			VehicleRepository vehicleRepository) {
		this.cvrpRepository = cvrpRepository;
		this.slotRepo = slotRepo;
		this.orderRepository=orderRepository;
		this.vehicleRepository=vehicleRepository;
	}

<<<<<<< HEAD
	public Logistics getJson() {
		Logistics list;
		list = restTemplate.getForObject(url_logistic, Logistics.class);
		Slot[] slots=list.getSlots();
		for(int i=0;i<slots.length;i++) {
			System.out.println(slots[i].getSlotId());
		}
=======
	public DateLogistics getJson() {
		DateLogistics list;
		list = restTemplate.getForObject(url_logistic, DateLogistics.class);
>>>>>>> 7d42e2f5487168cd174b2c09c95b18224356b621
		return list;
	
	}

//	public Location getLocationByOrder(String orderId) {
//		
//
//	}

	public List<Location> getLocationBySlot(int slotId) {

		Optional<Slot> slotObj=slotRepo.findById(slotId);
		Order[] orders = null;
		Location location;
		List<Location> locations=new ArrayList<>();
		Slot slot=slotObj.get();
		Vehicle[] vehicles=slot.getSlotVehicle();
		for(int i=0;i<vehicles.length;i++) {
			orders=vehicles[i].getVehicleRoute();
		}
		for(int j=0;j<orders.length;j++) {
			location=orders[j].getOrderLocation();
			locations.add(location);
		}
		return locations;
	}

	public Double[][] getDistanceMatrix(Location[] location) throws IllegalLocationMatrixException {
		String url1 = "https://dev.virtualearth.net/REST/v1/Routes/DistanceMatrix?";
		String origins = "origins=";
		String destinations = "destinations=";
		String url2 = "travelMode=driving&key=AhT3nVgSlv14w5u2GLYkCrCJm1VWDkBeEGHpG4JFNb13vgktN7OIJEr-5KZZrZah";
		String inline = "";
		Double[][] distanceMatrix = new Double[location.length][location.length];
		for (int i = 0; i < location.length; i++) {
			for (int j = 0; j < 1; j++) {
				String str1 = location[i].getOrderLatitude();
				String str2 = location[i].getOrderLongitude();
				origins = origins + str1 + "," + str2 + ";";
				destinations = destinations + str1 + "," + str2 + ";";
			}

		}
		String url = url1 + origins + "&" + destinations + "&" + url2;

		try {
			URL url3 = new URL(url);
			HttpURLConnection conn = (HttpURLConnection) url3.openConnection();
			conn.setRequestMethod("GET");
			conn.connect();
			int responsecode = conn.getResponseCode();
			if (responsecode != 200)
				throw new IllegalLocationMatrixException("HttpResponseCode: " + responsecode);
			else {
				Scanner sc = new Scanner(url3.openStream());
				while (sc.hasNext()) {
					inline += sc.nextLine();
				}
				sc.close();
			}

			JSONParser parse = new JSONParser();
			JSONObject jobj = (JSONObject) parse.parse(inline);
			JSONArray jsonarr_1 = (JSONArray) jobj.get("resourceSets");
			JSONObject jsonobj_1 = (JSONObject) jsonarr_1.get(0);
			JSONArray jsonarr_2 = (JSONArray) jsonobj_1.get("resources");
			JSONObject jsonobj_3 = (JSONObject) jsonarr_2.get(0);
			JSONArray jsonarr_3 = (JSONArray) jsonobj_3.get("results");
			for (int j = 1; j < jsonarr_3.size(); j++) {
				JSONObject jsonobj_2 = (JSONObject) jsonarr_3.get(j);
				int str_data1 = ((Long) jsonobj_2.get("destinationIndex")).intValue();
				// System.out.println(str_data1);
				int str_data2 = ((Long) jsonobj_2.get("originIndex")).intValue();
				// System.out.println(str_data2);
				Long str_data3 = (Long) jsonobj_2.get("totalWalkDuration");
				// System.out.println(str_data3);
				try {
					Double str_data4 = (Double) jsonobj_2.get("travelDistance");
					// System.out.println(str_data4);
					// Double str_data5 = (Double) jsonobj_2.get("travelDuration");
					// System.out.println(str_data5);
					if (str_data1 != str_data2) {
						distanceMatrix[str_data1][str_data2] = str_data4;
						distanceMatrix[str_data2][str_data1] = str_data4;
					} else
						distanceMatrix[str_data1][str_data1] = null;
				} catch (Exception e) {
					Long str_data4 = (Long) jsonobj_2.get("travelDistance");
					// System.out.println(str_data4);
					// Long str_data5 = (Long) jsonobj_2.get("travelDuration");
					// System.out.println(str_data5);

				}
				System.out.println("\n");

			}
			conn.disconnect();
		} catch (

		Exception e) {
			e.printStackTrace();
		}
		return distanceMatrix;
	}
<<<<<<< HEAD
//	public void TabuSearch(int tabu_horizon, double[][] costMatrix) {
//
//		// We use 1-0 exchange move
//		ArrayList<Order> routeFrom;
//		ArrayList<Order> routeTo;
//
//		int movingNodeDemand = 0;
//
//		int vehIndexFrom, vehIndexTo;
//		double bestNCost, neigthboorCost;
//
//		int swapIndexA = -1, swapIndexB = -1, swapRouteFrom = -1, swapRouteTo = -1;
//
//		int MAX_ITERATIONS = 200;
//		int iteration_number = 0;
//
//		int dimensionCustomer = costMatrix[1].length;
//		int tabu_matrix[][] = new int[dimensionCustomer + 1][dimensionCustomer + 1];
//
////		BestSolutionCost = this.Cost; // Initial Solution Cost
//
//		boolean Termination = false;
//
//		while (!Termination) {
//			iteration_number++;
//			bestNCost = Double.MAX_VALUE;
//
//			for (vehIndexFrom = 0; vehIndexFrom < this.Vehicles.length; vehIndexFrom++) {
//				RouteFrom = this.Vehicles[VehIndexFrom].Route;
//				int RoutFromLength = RouteFrom.size();
//				for (int i = 1; i < RoutFromLength - 1; i++) { // Not possible to move depot!
//
//					for (VehIndexTo = 0; VehIndexTo < this.Vehicles.length; VehIndexTo++) {
//						RouteTo = this.Vehicles[VehIndexTo].Route;
//						int RouteTolength = RouteTo.size();
//						for (int j = 0; (j < RouteTolength - 1); j++) {// Not possible to move after last Depot!
//
//							MovingNodeDemand = RouteFrom.get(i).demand;
//
//							if ((VehIndexFrom == VehIndexTo)
//									|| this.Vehicles[VehIndexTo].CheckIfFits(MovingNodeDemand)) {
//								// If we assign to a different route check capacity constrains
//								// if in the new route is the same no need to check for capacity
//
//								if (((VehIndexFrom == VehIndexTo) && ((j == i) || (j == i - 1))) == false) // Not a move
//																											// that
//																											// Changes
//																											// solution
//																											// cost
//								{
//									double MinusCost1 = CostMatrix[RouteFrom.get(i - 1).NodeId][RouteFrom
//											.get(i).NodeId];
//									double MinusCost2 = CostMatrix[RouteFrom.get(i).NodeId][RouteFrom
//											.get(i + 1).NodeId];
//									double MinusCost3 = CostMatrix[RouteTo.get(j).NodeId][RouteTo.get(j + 1).NodeId];
//
//									double AddedCost1 = CostMatrix[RouteFrom.get(i - 1).NodeId][RouteFrom
//											.get(i + 1).NodeId];
//									double AddedCost2 = CostMatrix[RouteTo.get(j).NodeId][RouteFrom.get(i).NodeId];
//									double AddedCost3 = CostMatrix[RouteFrom.get(i).NodeId][RouteTo.get(j + 1).NodeId];
//
//									// Check if the move is a Tabu! - If it is Tabu break
//									if ((TABU_Matrix[RouteFrom.get(i - 1).NodeId][RouteFrom.get(i + 1).NodeId] != 0)
//											|| (TABU_Matrix[RouteTo.get(j).NodeId][RouteFrom.get(i).NodeId] != 0)
//											|| (TABU_Matrix[RouteFrom.get(i).NodeId][RouteTo.get(j + 1).NodeId] != 0)) {
//										break;
//									}
//
//									NeigthboorCost = AddedCost1 + AddedCost2 + AddedCost3 - MinusCost1 - MinusCost2
//											- MinusCost3;
//
//									if (NeigthboorCost < BestNCost) {
//										BestNCost = NeigthboorCost;
//										SwapIndexA = i;
//										SwapIndexB = j;
//										SwapRouteFrom = VehIndexFrom;
//										SwapRouteTo = VehIndexTo;
//									}
//								}
//							}
//						}
//					}
//				}
//			}
//
//			for (int o = 0; o < TABU_Matrix[0].length; o++) {
//				for (int p = 0; p < TABU_Matrix[0].length; p++) {
//					if (TABU_Matrix[o][p] > 0) {
//						TABU_Matrix[o][p]--;
//					}
//				}
//			}
//
//			RouteFrom = this.Vehicles[SwapRouteFrom].Route;
//			RouteTo = this.Vehicles[SwapRouteTo].Route;
//			this.Vehicles[SwapRouteFrom].Route = null;
//			this.Vehicles[SwapRouteTo].Route = null;
//
//			Node SwapNode = RouteFrom.get(SwapIndexA);
//
//			int NodeIDBefore = RouteFrom.get(SwapIndexA - 1).NodeId;
//			int NodeIDAfter = RouteFrom.get(SwapIndexA + 1).NodeId;
//			int NodeID_F = RouteTo.get(SwapIndexB).NodeId;
//			int NodeID_G = RouteTo.get(SwapIndexB + 1).NodeId;
//
//			Random TabuRan = new Random();
//			int RendomDelay1 = TabuRan.nextInt(5);
//			int RendomDelay2 = TabuRan.nextInt(5);
//			int RendomDelay3 = TabuRan.nextInt(5);
//
//			TABU_Matrix[NodeIDBefore][SwapNode.NodeId] = TABU_Horizon + RendomDelay1;
//			TABU_Matrix[SwapNode.NodeId][NodeIDAfter] = TABU_Horizon + RendomDelay2;
//			TABU_Matrix[NodeID_F][NodeID_G] = TABU_Horizon + RendomDelay3;
//
//			RouteFrom.remove(SwapIndexA);
//
//			if (SwapRouteFrom == SwapRouteTo) {
//				if (SwapIndexA < SwapIndexB) {
//					RouteTo.add(SwapIndexB, SwapNode);
//				} else {
//					RouteTo.add(SwapIndexB + 1, SwapNode);
//				}
//			} else {
//				RouteTo.add(SwapIndexB + 1, SwapNode);
//			}
//
//			this.Vehicles[SwapRouteFrom].Route = RouteFrom;
//			this.Vehicles[SwapRouteFrom].load -= MovingNodeDemand;
//
//			this.Vehicles[SwapRouteTo].Route = RouteTo;
//			this.Vehicles[SwapRouteTo].load += MovingNodeDemand;
//
//			PastSolutions.add(this.Cost);
//
//			this.Cost += BestNCost;
//
//			if (this.Cost < BestSolutionCost) {
//				SaveBestSolution();
//			}
//
//			if (iteration_number == MAX_ITERATIONS) {
//				Termination = true;
//			}
//		}
//
//		this.Vehicles = VehiclesForBestSolution;
//		this.Cost = BestSolutionCost;
//
//		try {
//			PrintWriter writer = new PrintWriter("PastSolutionsTabu.txt", "UTF-8");
//			writer.println("Solutions" + "\t");
//			for (int i = 0; i < PastSolutions.size(); i++) {
//				writer.println(PastSolutions.get(i) + "\t");
//			}
//			writer.close();
//		} catch (Exception e) {
//		}
//	}

=======
	// public
>>>>>>> 7d42e2f5487168cd174b2c09c95b18224356b621

}
